package src;

import java.util.ArrayList;

@SuppressWarnings("unchecked")
public class MyStack<T> implements StackInterface<T> {

	private T[] stack;
	private int top, size;
	
	public MyStack(int size) { 
		this.size = size;
		this.top = 0;
		this.stack= (T[]) new Object[size];
	}
	
	public MyStack() {
		this(10); //initalize the default size of for the constructor 
	}
	
	public boolean isEmpty() {
		return top == 0;  //if top 0 then return
	}

	
	public boolean isFull() {
		return top == size;
	}

	@Override
	public T pop() throws StackUnderflowException {
		if(isEmpty()) {
			throw new StackUnderflowException();
		}
		T element = stack[--top];
		stack[top] = null;
		return element;
	}

	
	public T top() throws StackUnderflowException {
		if(isEmpty() == true) {
			throw new StackUnderflowException();
		}
		return stack[top - 1];
	}

	
	public int size() {
		return top;
	}

	public boolean push(T e) throws StackOverflowException {
		if(isFull() == true) {
			throw new StackOverflowException();
		}
		stack[top++] = e;
		return true;
	}
	
	@Override
	public String toString() {
		StringBuilder str = new StringBuilder();
		for (int i = 0; i < top; i++) {
			str.append(stack[i]);
		}
		return str.toString();
	}

	@Override
	public String toString(String delimiter) {
		StringBuilder stackString = new StringBuilder();
		for (int i = 0; i < top; i++) {
			stackString.append(stack[i]);
			if (i < top - 1) {
				stackString.append(delimiter);
			}
		}
		return stackString.toString();
	}


	public void fill(ArrayList<T> list) throws StackOverflowException {
		for (T element : list) {
			push(element);
		}
	}

}
